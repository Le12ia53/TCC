import matplotlib.pyplot as plt
import numpy as np

# Dados de desempenho para os modelos Random Forest e Regressão Logística
labels = ['Precision', 'Recall', 'F1-score']
random_forest = [0.85, 0.82, 0.83]  # Valores para Random Forest
logistic_regression = [0.82, 0.80, 0.81]  # Valores para Regressão Logística

# Configuração de gráfico
x = np.arange(len(labels))  # A localização das barras
width = 0.35  # Largura das barras

fig, ax = plt.subplots()
bars_rf = ax.bar(x - width/2, random_forest, width, label='Random Forest', color='#003366')
bars_lr = ax.bar(x + width/2, logistic_regression, width, label='Logistic Regression', color='#2EC4B6')

# Adicionando detalhes
ax.set_ylabel('Scores')
ax.set_title('Comparação de Desempenho: Random Forest vs Regressão Logística')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

# Função para adicionar os valores no topo de cada barra
def autolabel(bars):
    for bar in bars:
        height = bar.get_height()
        ax.annotate(f'{height:.2f}',
                    xy=(bar.get_x() + bar.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')

# Chamando a função para cada conjunto de barras
autolabel(bars_rf)
autolabel(bars_lr)

fig.tight_layout()

# Mostrar o gráfico
plt.show()
